
name: Build and Deploy to AWS ECR

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Install MySQL client
        run: sudo apt-get update && sudo apt-get install -y mysql-client
      - name: Start MySQL Service
        run: sudo systemctl start mysql
      - name: Change MySQL Root Password
        run: |
          mysql -u root -proot -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'Admin@123';"

      - name: Grant Privileges to Root User
        run: |
          mysql -h localhost -u root -pAdmin@123 -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION;"
      - name: Create Database
        run: |
          mysql -h localhost -u root -pAdmin@123 -e "CREATE DATABASE employees;"
      # Step 1: Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Step 2: Set up JDK 17 for building the JAR file
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      # Step 4: Build the project and run unit tests with JaCoCo for test coverage
      - name: Build with Maven
        run: mvn clean verify
      - name: Generate JaCoCo report
        run: mvn jacoco:report
      
      - name: Archive JaCoCo report
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: target/site/jacoco

      - name: check in file
        run: |
          ls /home/runner/work/javaapp/javaapp/target/site/jacoco/
          
      - name: Install jq
        run: sudo apt-get install jq
        
      - name: Run SonarQube analysis
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn sonar:sonar 

      - name: Enforce Quality Gate
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # Fetch the project status from SonarQube API
          status=$(curl -s -u "$SONAR_TOKEN": "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=net.javaguides:springboot-backend" | jq -r '.projectStatus.status')

          if [ "$status" != "OK" ]; then
            echo "Quality gate failed"
            exit 1
          fi

        
          
      - name: Build and package JAR
        run: mvn clean package

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build Docker image
        run: docker build -t github-poc .

      - name: Tag Docker image
        run: |
          docker tag github-poc:latest 584294315145.dkr.ecr.us-east-1.amazonaws.com/github-poc:latest

      - name: Install Trivy
        run: |
          sudo apt-get install wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.39.1/trivy_0.39.1_Linux-64bit.deb
          sudo dpkg -i trivy_0.39.1_Linux-64bit.deb

      - name: Scan Docker image with Trivy
        run: |
          trivy image --severity HIGH,CRITICAL 584294315145.dkr.ecr.us-east-1.amazonaws.com/github-poc:latest
      
      - name: Push Docker image to ECR
        run: |
          docker push 584294315145.dkr.ecr.us-east-1.amazonaws.com/github-poc:latest
      
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:          
    - name: Set up SSH
      run: echo "$SSH_PRIVATE_KEY" > ~/poc.pem
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Set permissions for key.pem
      run: chmod 400 ~/poc.pem

    - name: Deploy to EC2
      run: |
        ssh -i ~/poc.pem -o StrictHostKeyChecking=no ubuntu@184.73.141.150 'rm -rf /home/ubuntu/javaap*'
        ssh -i ~/poc.pem -o StrictHostKeyChecking=no ubuntu@184.73.141.150 'git clone https://shekharbo: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@github.com/shekharbo/javaapp.git'
        ssh -i ~/poc.pem -o StrictHostKeyChecking=no ubuntu@184.73.141.150 'sudo chmod +x /home/ubuntu/javaapp/deploy.sh'
        ssh -i ~/poc.pem -o StrictHostKeyChecking=no ubuntu@184.73.141.150 'sh /home/ubuntu/javaapp/deploy.sh'
      

              
